#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

int randRange(int low, int high) {
	return rand() % (high - low) + low;
}

struct Unit {
	int level;
	int skill;
	int hp;
};

enum Names {
	Eeny, Meeny, Miny, Moe
};

Unit getNewUnit() {
	Unit character;
	character.level = 1;
	character.skill = 1;
	character.hp = 10;
	return character;
}

void levelUp(Unit& character) {
	character.level += 1;
	character.hp += randRange(1, 7);
}

//The parameters would have to be addresses in memory; &ref
void swap1(int *left, int *right) {
	int temp = *left;
	*left = *right;
	*right = temp;
}

void swap2(int& left, int& right) {
	int temp = left;
	left = right;
	right = temp;
}

int *growArray(int *pValues, int currentSize) {
	int *pNewValues = new int[currentSize * 2];
	for (int i = 0; i < currentSize; i++) {
		pNewValues[i] = pValues[i];
	}
	delete pValues;
	return pNewValues;
}

int main() {
	int numbers[8];
	int *p_numbers = numbers; // points to a statically declared array
	int *p_array = new int[3]; // points to memory
	delete[] p_array; // you DO NOT want to free a pointer pointing to a statically
					// declared array
	p_array = NULL;

	int *p_normalvalue;
	int normalvalue = 8;
	p_normalvalue = &normalvalue;
	*p_normalvalue = 103;
	cout << "normalvalue is " << normalvalue << endl;

	int nextElement = 0;
	int size = 10;
	int *p_values = new int[size];
	int val;
	cout << "Please enter a number: ";
	cin >> val;
	while (val > 0) {
		if (size == nextElement + 1) {
			p_values = growArray(p_values, size);
		}
		p_values[nextElement] = val;
		nextElement++;
		cout << "\nPlease enter a number (or 0 to exit): ";
		cin >> val;
	}

	cin.get();
	return 0;
}
